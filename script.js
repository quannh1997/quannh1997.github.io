document.addEventListener('DOMContentLoaded', () => {

    // --- 1. HI·ªÜU ·ª®NG TR√ÅI TIM BAY ---
    const heartsContainer = document.querySelector('.hearts-container');
    if (heartsContainer) {
        for (let i = 0; i < 20; i++) { // T·∫°o 20 tr√°i tim
            const heart = document.createElement('div');
            heart.classList.add('heart');
            heart.innerText = '‚ù§Ô∏è';
            
            heart.style.left = `${Math.random() * 100}%`;
            heart.style.animationDelay = `${Math.random() * 10}s`;
            heart.style.fontSize = `${Math.random() * 0.5 + 0.5}rem`; // K√≠ch th∆∞·ªõc ng·∫´u nhi√™n
            heart.style.animationDuration = `${Math.random() * 5 + 5}s`; // T·ªëc ƒë·ªô ng·∫´u nhi√™n
            
            heartsContainer.appendChild(heart);
        }
    }

    // --- 2. ƒê·ªíNG H·ªí ƒê·∫æM NG∆Ø·ª¢C ---
    // !!! THAY ƒê·ªîI NG√ÄY C∆Ø·ªöI C·ª¶A B·∫†N T·∫†I ƒê√ÇY !!!
    const weddingDate = new Date("Dec 25, 2025 18:00:00").getTime();

    const countdownFunction = setInterval(() => {
        const now = new Date().getTime();
        const distance = weddingDate - now;

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Hi·ªÉn th·ªã
        document.getElementById("days").innerText = days.toString().padStart(2, '0');
        document.getElementById("hours").innerText = hours.toString().padStart(2, '0');
        document.getElementById("minutes").innerText = minutes.toString().padStart(2, '0');
        document.getElementById("seconds").innerText = seconds.toString().padStart(2, '0');

        if (distance < 0) {
            clearInterval(countdownFunction);
            document.getElementById("countdown").innerHTML = "<h2>Ch√∫c M·ª´ng H·∫°nh Ph√∫c!</h2>";
        }
    }, 1000);

    // --- 3. B·∫¨T/T·∫ÆT NH·∫†C ---
    const music = document.getElementById("wedding-music");
    const musicToggle = document.getElementById("music-toggle");
    let isPlaying = false;

    if (music && musicToggle) {
        const playMusicOnce = () => {
            if (!isPlaying) {
                music.play().catch(error => console.log("L·ªói t·ª± ƒë·ªông ph√°t nh·∫°c:", error));
                isPlaying = true;
                musicToggle.innerText = "üîá";
            }
        };
        // T·ª± ƒë·ªông b·∫≠t nh·∫°c khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
        document.body.addEventListener('click', playMusicOnce, { once: true });
        document.body.addEventListener('scroll', playMusicOnce, { once: true });

        musicToggle.addEventListener('click', () => {
            if (isPlaying) {
                music.pause();
                musicToggle.innerText = "üéµ";
            } else {
                music.play();
                musicToggle.innerText = "üîá";
            }
            isPlaying = !isPlaying;
        });
    }

    // --- 4. HI·ªÜU ·ª®NG FADE IN KHI CU·ªòN ---
    const revealElements = document.querySelectorAll('.reveal');
    const revealObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('active');
                revealObserver.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });

    revealElements.forEach(el => revealObserver.observe(el));

    // --- 5. TABS C√î D√ÇU / CH√ö R·ªÇ ---
    const tabButtons = document.querySelectorAll('.tab-btn');
    const brideGroomImage = document.getElementById('bride-groom-image');
    
    // ƒê·∫∑t s·∫µn ƒë∆∞·ªùng d·∫´n ·∫£nh (b·∫°n ph·∫£i thay cho ƒë√∫ng)
    const images = {
        bride: 'images/bride.jpg',
        groom: 'images/groom.jpg'
    };

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            // X√≥a active c·ªßa t·∫•t c·∫£
            tabButtons.forEach(btn => btn.classList.remove('active'));
            // Th√™m active cho n√∫t ƒë∆∞·ª£c click
            button.classList.add('active');
            
            // ƒê·ªïi ·∫£nh
            const targetImage = button.getAttribute('data-target'); // 'bride' or 'groom'
            if (brideGroomImage && images[targetImage]) {
                brideGroomImage.src = images[targetImage];
            }
        });
    });

    // --- 6. X·ª¨ L√ù FORM RSVP ---
    const rsvpForm = document.getElementById('rsvp-form');
    if (rsvpForm) {
        rsvpForm.addEventListener('submit', (e) => {
            e.preventDefault();
            // T∆∞∆°ng t·ª± m·∫´u tr∆∞·ªõc, vi·ªác g·ª≠i form c·∫ßn backend.
            // Ch√∫ng ta ch·ªâ m√¥ ph·ªèng l√† ƒë√£ g·ª≠i th√†nh c√¥ng.
            alert("C·∫£m ∆°n b·∫°n ƒë√£ x√°c nh·∫≠n!");
            rsvpForm.reset();
        });
    }

});